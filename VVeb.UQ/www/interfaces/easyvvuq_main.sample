import os
import easyvvuq as uq
import chaospy as cp

# --- Here is an example of what the key inputs  should look like
run_script = 'run_script_easyvvuq.py'
parameters = {
    "var1": {
        "type": "float",
        "min": 0.0,
        "max": 100000.0,
        "default": 0.25
    },
    "var2": {
        "type": "float",
        "min": 0.0,
        "max": 100000.0,
        "default": 1.0
    },
    "var3": {
        "type": "integer",
        "min": 0,
        "max": 100000,
        "default": 10
    },
    "out_file": {
        "type": "string",
        "default": "easyvvuq_out.csv"
    }
}
variations = {
    "var1": cp.Uniform(1.0, 100.0),
    "var2": cp.Uniform(1.0, 100.0),
}
n_samples = 4

# --- THIS ABOVE IS JUST AN EXAMPLE, NEW CODE LINES WILL REPLACE
# --- the string just below in real app
#REPLACE_INPUTS_HERE





# --- The usual (simple) easyVVUQ set-up

# --- Setup some variables describing app to be run
cwd = os.getcwd()
input_filename = 'easyvvuq_in.json'
out_file = "easyvvuq_out.csv"
template = f"{cwd}/easyvvuq_input.template"
cmd = f"{cwd}/{run_script} {input_filename}"

# --- Create campaign
my_campaign = uq.Campaign(name='easyvvuq_campaign', work_dir=".")

# --- Encoder for the input file
encoder = uq.encoders.GenericEncoder(template_fname=template, target_filename=input_filename)

# --- Decoder for the output file
decoder = uq.decoders.SimpleCSV(target_filename=out_file, output_columns=['Step','Value'], header=0)

# --- Collate fake results into fake average...
collater = uq.collate.AggregateSamples(average=True)

# --- Define campaign
my_campaign.add_app(name="run_script_easyvvuq", params=parameters, encoder=encoder, decoder=decoder, collater=collater)

# --- Specify Sampler
my_sampler = uq.sampling.RandomSampler(vary=variations)
my_campaign.set_sampler(my_sampler)

# --- How many samples?
my_campaign.draw_samples(num_samples=n_samples, replicas=1)

# --- Create run input directories
my_campaign.populate_runs_dir()

print(my_campaign)

# --- Run Application with internal script
my_campaign.apply_for_each_run_dir(uq.actions.ExecuteLocal(cmd, interpret='python3'))





# --- Analysis steps are not needed
# --- Collate output
#my_campaign.collate()
# --- Run Analysis
#stats = uq.analysis.EnsembleBoot(groupby=["mu"], qoi_cols=["Value"])
#my_campaign.apply_analysis(stats)
#print("stats:\n", my_campaign.get_last_analysis())
